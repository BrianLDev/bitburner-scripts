// GLOBAL VARIABLES
var filename = "early-hack-template.js"	// name of hacking script
var serverList = scan();	// list of 1st level servers
var serversHacked, serversNotHacked = []

// FUNCTIONS
function GetArrayServersToHack(fullList) {
	var listToHack = [];
	for (var i=0; i<fullList.length; i++) {
		fullList = fullList.concat(GetNestedServers(fullList[i]));	// add nested servers to scan list
		// tprint("Root access on " + fullList[i] + "? " + hasRootAccess(fullList[i]));
		if (!hasRootAccess(fullList[i])) {
			listToHack.push(fullList[i])
		}
	}
	return listToHack;
}

function GetNestedServers(server) {
	var nestedServers = scan(server);
	nestedServers.shift();	// get rid of reference to parent server
	if(nestedServers.length > 0) {
		tprint(server + " nested servers: " + nestedServers);
	}
	return nestedServers;
}

function HackServers(arrayOfServers) {
	for (var i=0; i<arrayOfServers.length; i++) {
		if (getHackingLevel() < getServerRequiredHackingLevel(arrayOfServers[i])) {
			tprint("Can't hack " + arrayOfServers[i] + " - Hacking level is below " + getServerRequiredHackingLevel(arrayOfServers[i]));
			serversNotHacked.push(arrayOfServers[i]);
			continue;
		}
		else {
			scp(filename, "home", arrayOfServers[i]);
			OpenPorts(arrayOfServers[i]);
			nuke(arrayOfServers[i]);
			var threads = calcMaxThreads(filename, arrayOfServers[i]);
			exec(filename, arrayOfServers[i], threads);
			serversHacked.push(arrayOfServers[i]);
		}
	}
}

function OpenPorts(server) {
	var ports = getServerNumPortsRequired(server);
	if (ports >= 1) { 
		brutessh(server);
	}
	if (ports >= 2) {
		ftpcrack(server);
	}
	if (ports >= 3) {
		print("Error: can't hack " + server + ". Need more port openers.");
		serversNotHacked.push(server);
	}
	// TODO: add other port openers later
}

function calcMaxThreads(file, server) {
	return getServerMaxRam(server) / getScriptRam(file);
}

// RUN SCRIPTS
var serversToHack = GetArrayServersToHack(serverList);
tprint("Hacking: " + serversToHack);
HackServers(serversToHack);
tprint("-----\nSERVERS HACKED: \n" + serversHacked);
tprint("-----\nSERVERS NOT HACKED: \n" + serversNotHacked);
alert("Hack-all finished running.");